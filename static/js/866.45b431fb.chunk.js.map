{"version":3,"file":"static/js/866.45b431fb.chunk.js","mappings":"4LAEaA,EAAU,kBACrB,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,0BACVC,aAAc,CACZC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZN,OAAQ,QACRO,OAAQ,SACRC,SAAU,QACVC,IAAK,IACLC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,OAAQ,QAEVC,aAAa,0BACbC,WAAW,UACXC,MAAM,WArBa,C,+LCAvBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCAEVC,EAAmB,mCAAG,oGACHF,EAAAA,EAAAA,IAAU,sBAAuB,CACtDG,OAAQ,CACNC,QAASH,KAHa,cACpBI,EADoB,yBAOnBA,EAASC,KAAKC,SAPK,2CAAH,qDAUnBC,EAAc,mCAAG,WAAMC,GAAN,uFACET,EAAAA,EAAAA,IAAA,iBAAoBS,GAAM,CAC/CN,OAAQ,CACNC,QAASH,KAHQ,cACfI,EADe,yBAOdA,EAASC,MAPK,2CAAH,sDAUdI,EAAc,mCAAG,WAAMD,GAAN,uFACET,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAkC,CACvDN,OAAQ,CACNC,QAASH,KAHQ,cACfI,EADe,yBAMdA,EAASC,MANK,2CAAH,sDASdK,EAAiB,mCAAG,WAAMF,GAAN,uFACDT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAkC,CACvDN,OAAQ,CACNC,QAASH,KAHW,cAClBI,EADkB,yBAOjBA,EAASC,MAPQ,2CAAH,sDAUjBM,EAAiB,mCAAG,WAAMC,GAAN,uFACDb,EAAAA,EAAAA,IAAA,8BAAiCa,GAAS,CAC/DV,OAAQ,CACNC,QAASH,KAHW,cAClBI,EADkB,yBAMjBA,EAASC,KAAKC,SANG,2CAAH,sDASVO,EAAkB,CAAEH,kBAAAA,GACpBI,EAAmB,CAAEb,oBAAAA,GACrBc,EAAe,CAAER,eAAAA,GACjBS,EAAe,CAAEP,eAAAA,GACjBQ,EAAiB,CAAEN,kBAAAA,E,4KCzDhC,EAAuB,sBAAvB,EAAoD,sB,kBCMvCO,EAAU,WACrB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEMb,GADcc,EAAAA,EAAAA,MACGC,QACvB,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAY,mCAAG,6GAEkBd,EAAAA,GAAAA,kBACjCL,GAHe,OAEXoB,EAFW,OAKjBP,GAAW,OAAIO,EAAqBtB,UACpCmB,GAAa,GANI,gDAQjBI,QAAQC,IAAR,MARiB,yDAAH,qDAWlBH,EAAanB,EACd,GAAE,CAACA,KAGF,2BACGgB,IAAa,SAAC5C,EAAA,EAAD,KACd,eAAImD,UAAWC,EAAf,SACGZ,GAAWA,EAAQa,OAClBb,EAAQc,KAAI,gBAAG1B,EAAH,EAAGA,GAAI2B,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,gBAAIL,UAAWC,EAAf,WACE,qCAAaG,MACb,uBAAIC,MAF0B5B,EADtB,KAOZ,yEAKT,EAED,G","sources":["components/Spinner/Spinner.jsx","components/services/fetchAPI.js","webpack://react-homework-template/./src/pages/Reviews/Reviews.module.css?9a3e","pages/Reviews/Reviews.jsx"],"sourcesContent":["import { MagnifyingGlass } from 'react-loader-spinner';\n\nexport const Spinner = () => (\n  <MagnifyingGlass\n    visible={true}\n    height=\"80\"\n    width=\"80\"\n    ariaLabel=\"MagnifyingGlass-loading\"\n    wrapperStyle={{\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '100vh',\n      margin: '0 auto',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      zIndex: '9999',\n    }}\n    wrapperClass=\"MagnifyingGlass-wrapper\"\n    glassColor=\"#c0efff\"\n    color=\"#e15b64\"\n  />\n);\n\nexport default Spinner;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = '4644ef2dd871b6a3e3d5190dd084c262';\n\nconst fetchMoviesTrending = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return response.data.results;\n};\n\nconst fetchMovieById = async id => {\n  const response = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return response.data;\n};\n\nconst fetchCastMovie = async id => {\n  const response = await axios.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nconst fetchReviewsMovie = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return response.data;\n};\n\nconst fetchSearchMovies = async query => {\n  const response = await axios.get(`/search/movie?query=${query}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getReviewsMovie = { fetchReviewsMovie };\nexport const getTrendingMovie = { fetchMoviesTrending };\nexport const getMovieById = { fetchMovieById };\nexport const getCastMovie = { fetchCastMovie };\nexport const getSearchMovie = { fetchSearchMovies };\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Reviews_list__pCzae\",\"item\":\"Reviews_item__G1rz-\"};","import { getReviewsMovie } from 'components/services/fetchAPI';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport style from 'pages/Reviews/Reviews.module.css';\nimport { Spinner } from 'components/Spinner/Spinner';\nimport PropTypes from 'prop-types';\n\nexport const Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const queryParams = useParams();\n  const id = queryParams.movieId;\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const reviewsMovie = async () => {\n      try {\n        const fetchedReviewsMovies = await getReviewsMovie.fetchReviewsMovie(\n          id\n        );\n        setReviews([...fetchedReviewsMovies.results]);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    reviewsMovie(id);\n  }, [id]);\n\n  return (\n    <div>\n      {isLoading && <Spinner />}\n      <ul className={style.list}>\n        {reviews && reviews.length ? (\n          reviews.map(({ id, author, content }) => (\n            <li className={style.item} key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))\n        ) : (\n          <p>We don't have any reviews for this movie.</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n\nReviews.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.number,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ),\n};\n"],"names":["Spinner","visible","height","width","ariaLabel","wrapperStyle","display","justifyContent","alignItems","margin","position","top","left","right","bottom","zIndex","wrapperClass","glassColor","color","axios","API_KEY","fetchMoviesTrending","params","api_key","response","data","results","fetchMovieById","id","fetchCastMovie","fetchReviewsMovie","fetchSearchMovies","query","getReviewsMovie","getTrendingMovie","getMovieById","getCastMovie","getSearchMovie","Reviews","useState","reviews","setReviews","useParams","movieId","isLoading","setIsLoading","useEffect","reviewsMovie","fetchedReviewsMovies","console","log","className","style","length","map","author","content"],"sourceRoot":""}